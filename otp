#!/usr/bin/env bash

# https://tools.ietf.org/html/rfc6238

function otp() {

    # License: BSD-3-Clause
    # Source: https://github.com/fmierlo/otp/

    OTP_EPOCH="${EPOCHSECONDS:-$(date -u +"%s")}"
    OTP_DIGITS="${OTP_DIGITS:-6}"
    OTP_PERIOD="${OTP_PERIOD:-30}"
    OTP_ALGORITHM="${OTP_ALGORITHM:-SHA1}"
    OTP_SECRET_FILE="${OTP_SECRET_FILE:?Missing param}"
    OTP_BASE32="${OTP_BASE32:-base32}"

    # This is to avoid leaking the secret when running "bash -x".
    read -r secret < "${OTP_SECRET_FILE}"
    read -r secret <<<"${secret/otpauth*secret=/}"
    read -r secret <<<"${secret/&*/}"

    {
        # INTERVAL
        interval="$((${OTP_EPOCH} / ${OTP_PERIOD}))"
        # Integer to hex.
        printf -v hex "%016X" "${interval}"
        # Hex to binary.
        for ((i=0; i< "${#hex}"; i+=2))
        do
            echo -ne "\x${hex:i:2}"
        done
    } | {
        # DIGEST
        # The digest is a 160-bit hexadecimal number string from interval.
        openssl dgst -"${OTP_ALGORITHM}" -hmac "$("${OTP_BASE32}" -d <<<"${secret}")" | {
            read digest
            echo "${digest/* /}"
        }
    } | {
        # TOKEN
        read digest
        # Read the last 4 bits and convert it into an unsigned integer.
        start="$(( 0x${digest:(-1)} * 2))"
        # Read a 32-bit positive integer and take at most six rightmost digits.
        token="$(( ((0x${digest:${start}:8}) & 0x7FFFFFFF) % $((10 ** ${OTP_DIGITS})) ))"
        # Pad the token number with leading zeros if needed.
        printf "%0${OTP_DIGITS}d\n" "${token}"
    }
}

# Return if the script was sourced
return 0 2> /dev/null || true

set -euo pipefail

function base32_py() {
    python3 -c "import base64, sys; sys.stdout.buffer.write(base64.b32decode(sys.stdin.read().strip()))"
}

# base32: Standard linux or macOS with coreutils.
# base32_py: macOS without coreutils.
function which_base32() {
    command -v base32 \
        || { command -v python3 > /dev/null && command -v base32_py; } \
        || { echo "base32: command not found" >&2 && return 1; }
}

OTP_SECRET_FILE="${OTP_SECRET_FILE:-/dev/stdin}"
OTP_BASE32="${OTP_BASE32:-$(which_base32)}"

command -v "${OTP_BASE32}" > /dev/null \
    || { echo "${OTP_BASE32}: command not found" >&2 && exit 1; }

otp
