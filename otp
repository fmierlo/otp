#!/usr/bin/env bash -e

# https://tools.ietf.org/html/rfc6238

function otp() {
    OTP_EPOCH="${EPOCHSECONDS:-$(date -u +"%s")}"
    OTP_INTERVAL="${OTP_INTERVAL:-30}"
    OTP_SECRET_FILE="${OTP_SECRET_FILE:?Missing param}"
  
    exec {secret}< "${OTP_SECRET_FILE}"

    {
        # PERIOD
        period="$(echo "$(("${OTP_EPOCH}" / "${OTP_INTERVAL}"))")"
        # integer to hex
        printf -v hex "%016X" "${period}"
        # hex to binary
        for ((i=0; i< "${#hex}"; i+=2))
        do
            echo -ne "\x${hex:i:2}"
        done
    } | {
        # DIGEST
        # The digest is a 160-bit hexadecimal number string from period.
        openssl dgst -sha1 -hmac "$(base32 -d <&${secret})" | {
            read digest
            echo "${digest/* /}"
        }
    } | {
        # TOKEN
        read digest
        # Read the last 4 bits and convert it into an unsigned integer.
        start="$(( 0x${digest:(-1)} * 2))"
        # Read a 32-bit positive integer and take at most six rightmost digits.
        token="$(( ((0x${digest:${start}:8}) & 0x7FFFFFFF) % 1000000 ))"
        # Pad the token number with leading zeros if needed.
        printf '%06d\n' "${token}"
    }
}

# Return if the script was sourced
return 0 2>/dev/null || true

OTP_SECRET_FILE="${OTP_SECRET_FILE:-/dev/stdin}"

otp
